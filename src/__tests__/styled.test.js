import{styled,setup}from"../styled";import{extractCss}from"../core/update";const pragma=jest.fn(((e,t)=>({tag:e,props:{...t,className:t.className.replace(/go\d+/g,"go")}})));expect.extend({toMatchVNode:(e,t,a)=>(expect(e.tag).toEqual(t),expect(e.props).toEqual(a),{message:"Expected vnode to match vnode",pass:!0})}),describe("styled",(()=>{beforeEach((()=>{pragma.mockClear(),setup(pragma),extractCss()})),it("calls pragma",(()=>{setup(void 0),expect((()=>styled()()())).toThrow(),setup(pragma);const e=styled("div")``();expect(pragma).toBeCalledTimes(1),expect(e).toMatchVNode("div",{className:"go"})})),it("extend props",(()=>{const e=styled("tag")`
            color: peachpuff;
        `({bar:1});expect(e).toMatchVNode("tag",{bar:1,className:"go"}),expect(extractCss()).toEqual(".go3183460609{color:peachpuff;}")})),it("concat className if present in props",(()=>{const e=styled("tag")`
            color: peachpuff;
        `({bar:1,className:"existing"});expect(e).toMatchVNode("tag",{bar:1,className:"go existing"})})),it("pass template function",(()=>{const e=styled("tag")((e=>({color:e.color})))({color:"red"});expect(e).toMatchVNode("tag",{className:"go",color:"red"}),expect(extractCss()).toEqual(".go3433634237{color:red;}")})),it('change tag via "as" prop',(()=>{const e=styled("tag")`
            color: red;
        `;let t=e();expect(t).toMatchVNode("tag",{className:"go"}),t=e({as:"foo"}),expect(t).toMatchVNode("foo",{className:"go"}),t=e(),expect(t).toMatchVNode("tag",{className:"go"})})),it("support forwardRef",(()=>{const e=jest.fn((e=>t=>e(t,"ref"))),t=styled("tag",e)`
            color: red;
        `({bar:1});expect(t).toMatchVNode("tag",{bar:1,className:"go",ref:"ref"})})),it("setup useTheme",(()=>{setup(pragma,null,(()=>"theme"));const e=jest.fn((()=>({}))),t=styled("tag")(e)({bar:1});expect(e).toBeCalledWith({bar:1,theme:"theme"}),expect(t).toMatchVNode("tag",{bar:1,className:"go"})})),it("setup useTheme with theme prop override",(()=>{setup(pragma,null,(()=>"theme"));const e=jest.fn((()=>({}))),t=styled("tag")(e)({theme:"override"});expect(e).toBeCalledWith({theme:"override"}),expect(t).toMatchVNode("tag",{className:"go",theme:"override"})})),it("uses babel compiled classNames",(()=>{const e=styled("tag")``;e.className="foobar";const t=e({});expect(t).toMatchVNode("tag",{className:"go foobar"})})),it("omits css prop with falsy should forward prop function",(()=>{setup(pragma,void 0,void 0,(e=>{for(let t in e)t.includes("$")&&delete e[t]}));const e=styled("tag")`
            color: peachpuff;
        `({bar:1,$templateColumns:"1fr 1fr"});expect(e).toMatchVNode("tag",{className:"go",bar:1})})),it("pass truthy logical and operator",(()=>{let e=styled("tag")((e=>e.draw&&{color:"yellow"}))({draw:!0});expect(e).toMatchVNode("tag",{className:"go",draw:!0}),expect(extractCss()).toEqual(".go2986228274{color:yellow;}")}))}));