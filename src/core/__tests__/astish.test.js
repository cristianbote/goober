import{astish}from"../astish";describe("astish",(()=>{it("regular",(()=>{expect(astish("\n            prop: value;\n        ")).toEqual({prop:"value"})})),it("nested",(()=>{expect(astish("\n            prop: value;\n            @keyframes foo {\n                0% {\n                    attr: value;\n                }\n                50% {\n                    opacity: 1;\n                }\n                100% {\n                    foo: baz;\n                }\n            }\n            named {\n                background-image: url('/path-to-jpg.png');\n            }\n            opacity: 0;\n            .class,\n            &:hover {\n                -webkit-touch: none;\n            }\n        ")).toEqual({prop:"value",opacity:"0",".class, &:hover":{"-webkit-touch":"none"},"@keyframes foo":{"0%":{attr:"value"},"50%":{opacity:"1"},"100%":{foo:"baz"}},named:{"background-image":"url('/path-to-jpg.png')"}})})),it("merging",(()=>{expect(astish("\n            .c {\n                font-size:24px;\n            }\n        \n            .c {\n                color:red;\n            }\n        ")).toEqual({".c":{"font-size":"24px",color:"red"}})})),it("regression",(()=>{expect(astish("\n            &.g0ssss {\n                aa: foo;\n                box-shadow: 0 1px rgba(0, 2, 33, 4) inset;\n            }\n            named {\n                transform: scale(1.2), rotate(1, 1);\n            }\n            @media screen and (some-rule: 100px) {\n                foo: baz;\n                opacity: 1;\n                level {\n                    one: 1;\n                    level {\n                        two: 2;\n                    }\n                }\n            }\n            .a{\n                color: red;\n            }\n            .b  {\n                color: blue;\n            }\n        ")).toEqual({"&.g0ssss":{aa:"foo","box-shadow":"0 1px rgba(0, 2, 33, 4) inset"},".a":{color:"red"},".b":{color:"blue"},named:{transform:"scale(1.2), rotate(1, 1)"},"@media screen and (some-rule: 100px)":{foo:"baz",opacity:"1",level:{one:"1",level:{two:"2"}}}})})),it("should strip comments",(()=>{expect(astish("\n                color: red;\n                /*\n                    some comment\n                */\n                transform: translate3d(0, 0, 0);\n                /**\n                 * other comment\n                 */\n                background: peachpuff;\n                font-size: xx-large; /* inline comment */\n                /* foo: bar */\n                font-weight: bold;\n            ")).toEqual({color:"red",transform:"translate3d(0, 0, 0)",background:"peachpuff","font-size":"xx-large","font-weight":"bold"})})),it("should not mangle valid css identifiers",(()=>{expect(astish("\n                :root {\n                  --azAZ-_中文09: 0;\n                }\n            ")).toEqual({":root":{"--azAZ-_中文09":"0"}})})),it("should parse multiline background declaration",(()=>{expect(astish('\n                background: url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="white"><path d="M7.5 36.7h58.4v10.6H7.5V36.7zm0-15.9h58.4v10.6H7.5V20.8zm0 31.9h58.4v10.6H7.5V52.7zm0 15.9h58.4v10.6H7.5V68.6zm63.8-15.9l10.6 15.9 10.6-15.9H71.3zm21.2-5.4L81.9 31.4 71.3 47.3h21.2z"/></svg>\')\n                    center/contain;\n            ')).toEqual({background:'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="white"><path d="M7.5 36.7h58.4v10.6H7.5V36.7zm0-15.9h58.4v10.6H7.5V20.8zm0 31.9h58.4v10.6H7.5V52.7zm0 15.9h58.4v10.6H7.5V68.6zm63.8-15.9l10.6 15.9 10.6-15.9H71.3zm21.2-5.4L81.9 31.4 71.3 47.3h21.2z"/></svg>\') center/contain'})})),it("should handle inline @media block",(()=>{expect(astish("h1 { font-size: 1rem; } @media only screen and (min-width: 850px) { h1 { font-size: 2rem; } }")).toEqual({h1:{"font-size":"1rem"},"@media only screen and (min-width: 850px)":{h1:{"font-size":"2rem"}}})})),it("should handle newlines as part of the rule value",(()=>{expect(astish("tag {\n                    font-size: first\n                        second;\n                }")).toEqual({tag:{"font-size":"first second"}})}))}));