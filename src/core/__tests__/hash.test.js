import{hash}from"../hash";import{toHash}from"../to-hash";import{update}from"../update";import{parse}from"../parse";import{astish}from"../astish";jest.mock("../astish",(()=>({astish:jest.fn().mockReturnValue("astish()")}))),jest.mock("../parse",(()=>({parse:jest.fn().mockReturnValue("parse()")}))),jest.mock("../to-hash",(()=>({toHash:jest.fn().mockReturnValue("toHash()")}))),jest.mock("../update",(()=>({update:jest.fn().mockReturnValue("update()")}))),jest.mock("../astish",(()=>({astish:jest.fn().mockReturnValue("astish()")}))),jest.mock("../parse",(()=>({parse:jest.fn().mockReturnValue("parse()")}))),describe("hash",(()=>{beforeEach((()=>{toHash.mockClear(),update.mockClear(),parse.mockClear(),astish.mockClear()})),it("regression",(()=>{const e=hash("compiled","target");expect(toHash).toBeCalledWith("compiled"),expect(update).toBeCalledWith("parse()","target",void 0),expect(astish).toBeCalledWith("compiled"),expect(parse).toBeCalledWith("astish()",".toHash()"),expect(e).toEqual("toHash()")})),it("regression: cache",(()=>{const e=hash("compiled","target");expect(toHash).not.toBeCalled(),expect(astish).not.toBeCalled(),expect(parse).not.toBeCalled(),expect(update).toBeCalledWith("parse()","target",void 0),expect(e).toEqual("toHash()")})),it("regression: global",(()=>{const e=hash("global","target",!0);expect(toHash).toBeCalledWith("global"),expect(astish).not.toBeCalled(),expect(parse).not.toBeCalled(),expect(update).toBeCalledWith("parse()","target",void 0),expect(e).toEqual("toHash()")})),it("regression: keyframes",(()=>{const e=hash("keyframes","target",void 0,void 0,1);expect(toHash).toBeCalledWith("keyframes"),expect(astish).not.toBeCalled(),expect(parse).not.toBeCalled(),expect(update).toBeCalledWith("parse()","target",void 0),expect(e).toEqual("toHash()")})),it("regression: object",(()=>{const e=Math.random()+"unique";toHash.mockReturnValue(e);const t=hash({baz:1},"target");expect(toHash).toBeCalledWith("baz1"),expect(astish).not.toBeCalled(),expect(parse).toBeCalledWith({baz:1},"."+e),expect(update).toBeCalledWith("parse()","target",void 0),expect(t).toEqual(e)})),it("regression: cache-object",(()=>{const e=Math.random()+"unique";toHash.mockReturnValue(e),hash({cacheObject:1},"target"),expect(toHash).toBeCalledWith("cacheObject1"),toHash.mockClear(),hash({foo:2},"target"),expect(toHash).toBeCalledWith("foo2"),toHash.mockClear(),hash({cacheObject:1},"target"),expect(toHash).not.toBeCalled()}))}));